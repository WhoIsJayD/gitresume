<canvas id="doodle-canvas" class="fixed inset-0 w-full h-full opacity-10 pointer-events-none z-0"></canvas>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const canvas = document.getElementById('doodle-canvas');
        if (!canvas) return;

        const rc = rough.canvas(canvas);

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            drawRelevantDoodles();
        }

        function drawRelevantDoodles() {
            if (!rc || !rc.ctx) return;

            rc.ctx.clearRect(0, 0, canvas.width, canvas.height);
            const colors = ['#059669', '#34D399', '#10B981'];
            const strokeWidth = 2;
            const roughness = 1.5;

            if (canvas.width < 900 || canvas.height < 600) return;

            const zones = [
                {x: 30, y: 30, maxX: canvas.width * 0.10, maxY: canvas.height * 0.12},
                {x: canvas.width * 0.90, y: 30, maxX: canvas.width - 30, maxY: canvas.height * 0.12},
                {x: 30, y: canvas.height * 0.88, maxX: canvas.width * 0.10, maxY: canvas.height - 30},
                {x: canvas.width * 0.90, y: canvas.height * 0.88, maxX: canvas.width - 30, maxY: canvas.height - 30},
                {x: 15, y: canvas.height * 0.35, maxX: canvas.width * 0.06, maxY: canvas.height * 0.65},
                {x: canvas.width * 0.94, y: canvas.height * 0.35, maxX: canvas.width - 15, maxY: canvas.height * 0.65},
            ];

            function getRandomPositionInZone(zone) {
                return {
                    x: zone.x + Math.random() * (zone.maxX - zone.x),
                    y: zone.y + Math.random() * (zone.maxY - zone.y)
                };
            }

            const doodles = [
                {
                    zone: zones[0],
                    draw: (pos) => {
                        rc.circle(pos.x, pos.y, 8, {stroke: colors[0], strokeWidth, roughness});
                        rc.line(pos.x, pos.y + 4, pos.x, pos.y + 25, {stroke: colors[0], strokeWidth, roughness});
                        rc.line(pos.x, pos.y + 12, pos.x + 18, pos.y + 12, {stroke: colors[0], strokeWidth, roughness});
                        rc.circle(pos.x + 18, pos.y + 12, 6, {stroke: colors[1], strokeWidth, roughness});
                    }
                },
                {
                    zone: zones[1],
                    draw: (pos) => {
                        rc.line(pos.x - 15, pos.y, pos.x - 20, pos.y, {stroke: colors[2], strokeWidth, roughness});
                        rc.line(pos.x - 20, pos.y, pos.x - 20, pos.y + 15, {stroke: colors[2], strokeWidth, roughness});
                        rc.line(pos.x - 20, pos.y + 15, pos.x - 15, pos.y + 15, {
                            stroke: colors[2],
                            strokeWidth,
                            roughness
                        });
                        rc.line(pos.x, pos.y, pos.x + 5, pos.y, {stroke: colors[2], strokeWidth, roughness});
                        rc.line(pos.x + 5, pos.y, pos.x + 5, pos.y + 15, {stroke: colors[2], strokeWidth, roughness});
                        rc.line(pos.x + 5, pos.y + 15, pos.x, pos.y + 15, {stroke: colors[2], strokeWidth, roughness});
                    }
                },
                {
                    zone: zones[2],
                    draw: (pos) => {
                        rc.rectangle(pos.x, pos.y, 20, 28, {stroke: colors[1], strokeWidth, roughness});
                        rc.line(pos.x + 3, pos.y + 7, pos.x + 17, pos.y + 7, {
                            stroke: colors[1],
                            strokeWidth: 1,
                            roughness
                        });
                        rc.line(pos.x + 3, pos.y + 12, pos.x + 15, pos.y + 12, {
                            stroke: colors[1],
                            strokeWidth: 1,
                            roughness
                        });
                        rc.line(pos.x + 3, pos.y + 17, pos.x + 16, pos.y + 17, {
                            stroke: colors[1],
                            strokeWidth: 1,
                            roughness
                        });
                    }
                },
                {
                    zone: zones[3],
                    draw: (pos) => {
                        const starPoints = [
                            [pos.x - 15, pos.y - 10], [pos.x - 12, pos.y - 3], [pos.x - 5, pos.y - 3],
                            [pos.x - 8, pos.y + 2], [pos.x - 5, pos.y + 9], [pos.x - 15, pos.y + 6],
                            [pos.x - 25, pos.y + 9], [pos.x - 22, pos.y + 2], [pos.x - 25, pos.y - 3],
                            [pos.x - 18, pos.y - 3]
                        ];
                        rc.polygon(starPoints, {stroke: colors[0], strokeWidth, roughness});
                    }
                },
                {
                    zone: zones[4],
                    draw: (pos) => {
                        rc.rectangle(pos.x, pos.y, 28, 18, {stroke: colors[2], strokeWidth, roughness});
                        rc.line(pos.x + 3, pos.y + 6, pos.x + 6, pos.y + 9, {
                            stroke: colors[2],
                            strokeWidth: 1,
                            roughness
                        });
                        rc.line(pos.x + 6, pos.y + 9, pos.x + 3, pos.y + 12, {
                            stroke: colors[2],
                            strokeWidth: 1,
                            roughness
                        });
                        rc.line(pos.x + 9, pos.y + 12, pos.x + 18, pos.y + 12, {
                            stroke: colors[2],
                            strokeWidth: 1,
                            roughness
                        });
                    }
                },
                {
                    zone: zones[5],
                    draw: (pos) => {
                        rc.circle(pos.x - 22, pos.y, 5, {stroke: colors[1], strokeWidth, roughness});
                        rc.circle(pos.x - 8, pos.y - 12, 5, {stroke: colors[1], strokeWidth, roughness});
                        rc.circle(pos.x - 8, pos.y + 12, 5, {stroke: colors[1], strokeWidth, roughness});
                        rc.line(pos.x - 19, pos.y, pos.x - 11, pos.y - 12, {
                            stroke: colors[1],
                            strokeWidth: 1,
                            roughness
                        });
                        rc.line(pos.x - 19, pos.y, pos.x - 11, pos.y + 12, {
                            stroke: colors[1],
                            strokeWidth: 1,
                            roughness
                        });
                    }
                }];

            doodles.forEach(doodle => {
                try {
                    if (doodle.zone.maxX > doodle.zone.x && doodle.zone.maxY > doodle.zone.y) {
                        const pos = getRandomPositionInZone(doodle.zone);
                        doodle.draw(pos);
                    }
                } catch (error) {
                    console.log('Doodle drawing error:', error);
                }
            });
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
    });
</script>
