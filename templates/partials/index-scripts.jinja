<script src="/static/uuidv4.js"></script>
<script>
    function submitExample(repoUrl) {
        document.getElementById('repo_url').value = repoUrl;
        const path = repoUrl.replace('https://github.com/', '');
        history.pushState({}, '', '/' + path);
        document.getElementById('main-form').action = '/' + path;
        document.getElementById('repo_url').focus();
    }

    function toggleJobDescription() {
        const checkbox = document.getElementById('show_job_description');
        const container = document.getElementById('job_description_container');
        const textarea = document.getElementById('job_description');

        if (checkbox.checked) {
            container.classList.remove('hidden');
            container.classList.add('block');
            textarea.focus();
        } else {
            container.classList.add('hidden');
            container.classList.remove('block');
            textarea.value = '';
            document.getElementById('job_description_hidden').value = '';
        }
    }

    function prepareFormSubmit(event) {
        const checkbox = document.getElementById('show_job_description');
        const jobDescriptionTextarea = document.getElementById('job_description');
        const hiddenInput = document.getElementById('job_description_hidden');
        const repoUrl = document.getElementById('repo_url').value;

        // Strip newlines and excessive whitespace from job description
        let processedJobDescription = '';
        if (checkbox.checked) {
            processedJobDescription = jobDescriptionTextarea.value.replace(/\s+/g, ' ').trim();
        }
        hiddenInput.value = checkbox.checked ? processedJobDescription : '';

        const path = repoUrl.replace('https://github.com/', '');
        history.pushState({}, '', '/' + path);
        document.getElementById('main-form').action = '/' + path;

        resetUIState();
        return true;
    }

    function resetUIState() {
        const progressBar = document.getElementById('progress-bar');
        if (progressBar) {
            progressBar.style.setProperty('--progress', '0%');
        }

        const statusMessage = document.getElementById('status-message');
        if (statusMessage) {
            statusMessage.textContent = 'Connecting...';
        }

        ['clone', 'analyze', 'generate'].forEach(step => {
            const stepElement = document.getElementById(`step-${step}`);
            if (stepElement) {
                stepElement.className = stepElement.className.replace(/border-(yellow|green)-500|bg-(yellow|green)-50/g, 'border-retro');
            }
        });

        const resultsContainer = document.getElementById('results-container');
        if (resultsContainer) {
            resultsContainer.classList.add('hidden');
            resultsContainer.innerHTML = '';
        }
        const streamingResponse = document.getElementById('streaming-response-container');
        if (streamingResponse) {
            streamingResponse.classList.add('hidden');
        }
        const streamingContent = document.getElementById('streaming-content');
        if (streamingContent) {
            streamingContent.textContent = '';
        }

        if (window.currentWebSocket && window.currentWebSocket.readyState !== WebSocket.CLOSED) {
            window.currentWebSocket.close(1000);
            window.currentWebSocket = null;
        }
    }

    function regenerateResume() {
        resetUIState();
        document.getElementById('main-form').submit();
    }

    function copyLatex() {
        {% if result %}
            const result = {{ result | tojson }};
            const latex = formatLatex(result);
            copyToClipboard(latex, 'LaTeX copied!', event.target.closest('button'));
        {% endif %}
    }

    function copyText() {
        {% if result %}
            const result = {{ result | tojson }};
            const text = formatText(result);
            copyToClipboard(text, 'Text copied!', event.target.closest('button'));
        {% endif %}
    }

    window.addEventListener('load', () => {
        const jobDescription = "{{ job_description | safe }}";
        if (jobDescription) {
            const checkbox = document.getElementById('show_job_description');
            const container = document.getElementById('job_description_container');
            const textarea = document.getElementById('job_description');
            const hiddenInput = document.getElementById('job_description_hidden');

            checkbox.checked = true;
            container.classList.remove('hidden');
            container.classList.add('block');
            textarea.value = jobDescription;
            hiddenInput.value = jobDescription;
        }

        const currentPath = "{{ current_path }}";
        if (currentPath !== window.location.pathname) {
            history.replaceState({}, '', currentPath);
        }
    });

    {% if streaming %}
        const sessionId = "{{ session_id }}";
        let generationId = window.uuidv4();
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        let wsUrl = protocol + '//' + window.location.host + '/ws/' + sessionId + '?generation_id=' + generationId;

        window.currentWebSocket = null;
        let streamingContent = '';
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 3;
        let connectionTimeout = null;
        let currentResult = null;

        function connectWebSocket() {
            generationId = window.uuidv4();
            wsUrl = protocol + '//' + window.location.host + '/ws/' + sessionId + '?generation_id=' + generationId;
            if (window.currentWebSocket && window.currentWebSocket.readyState !== WebSocket.CLOSED) {
                window.currentWebSocket.close(1000);
            }
            window.currentWebSocket = new WebSocket(wsUrl);
            const ws = window.currentWebSocket;

            connectionTimeout = setTimeout(() => {
                if (ws.readyState !== WebSocket.OPEN) {
                    updateStatus('‚ùå Connection timed out. Please try again.');
                    ws.close(1000);
                }
            }, 30000);

            ws.onopen = function () {
                clearTimeout(connectionTimeout);
                reconnectAttempts = 0;
                console.log('WebSocket connected');
                updateStatus('üîó Connected! Starting generation...');
                updateProgress(10);
            };

            ws.onmessage = function (event) {
                try {
                    const data = JSON.parse(event.data);
                    if (data.generation_id && data.generation_id !== generationId) return; // Ignore messages for other generations
                    switch (data.type) {
                        case 'status':
                            updateStatus(data.content);
                            updateStepProgress(data.content);
                            break;
                        case 'complete':
                            updateStatus('‚úÖ Generation complete!');
                            showResults(data.result);
                            updateProgress(100);
                            if (data.redirect_path && data.redirect_path !== window.location.pathname) {
                                history.pushState({}, '', data.redirect_path);
                                document.getElementById('main-form').action = data.redirect_path;
                            }
                            ws.close(1000);
                            window.currentWebSocket = null;
                            clearTimeout(connectionTimeout);
                            break;
                        case 'error':
                            updateStatus('‚ùå Error: ' + data.content);
                            showError(data.content);
                            ws.close(1000);
                            window.currentWebSocket = null;
                            clearTimeout(connectionTimeout);
                            break;
                    }
                } catch (err) {
                    updateStatus('‚ùå Error processing response. Please try again.');
                }
            };
            ws.onclose = function (event) {
                clearTimeout(connectionTimeout);

                const permanentErrorCodes = [4002, 4003];
                const isPermanentError = permanentErrorCodes.includes(event.code);

                if (event.code !== 1000 && !isPermanentError && reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    updateStatus(`‚ö†Ô∏è Connection lost. Reconnecting (${reconnectAttempts}/${maxReconnectAttempts})...`);
                    setTimeout(connectWebSocket, 1000 * Math.pow(2, reconnectAttempts));
                } else if (event.code !== 1000) {
                    if (isPermanentError) {
                        updateStatus('‚ùå Request failed. Please check the repository URL and try again.');
                    } else {
                        updateStatus('‚ùå Connection failed. Please refresh and try again.');
                    }
                    window.currentWebSocket = null;
                }
            };

            ws.onerror = function (error) {
                updateStatus('‚ùå Connection error. Reconnecting...');
            };
        }

        function updateStatus(message) {
            const statusMessage = document.getElementById('status-message');
            if (statusMessage) {
                statusMessage.textContent = message;
            }
        }

        function updateProgress(percentage) {
            const progressBar = document.getElementById('progress-bar');
            if (progressBar) {
                progressBar.style.setProperty('--progress', `${percentage}%`);
            }
        }

        function updateStepProgress(message) {
            if (message.includes('Cloning') || message.includes('existing repository') || message.includes('üîÑ')) {
                highlightStep('clone');
                updateProgress(20);
            } else if (message.includes('Analyzing') || message.includes('üìä')) {
                completeStep('clone');
                highlightStep('analyze');
                updateProgress(40);
            } else if (message.includes('Generating') || message.includes('üìù')) {
                completeStep('analyze');
                highlightStep('generate');
                updateProgress(60);
            }
        }

        function highlightStep(step) {
            const stepElement = document.getElementById('step-' + step);
            if (stepElement) {
                stepElement.className = stepElement.className.replace('border-retro', 'border-yellow-500 bg-yellow-50');
            }
        }

        function completeStep(step) {
            const stepElement = document.getElementById('step-' + step);
            if (stepElement) {
                stepElement.className = stepElement.className.replace('border-retro', 'border-green-500 bg-green-50');
                stepElement.className = stepElement.className.replace('border-yellow-500 bg-yellow-50', 'border-green-500 bg-green-50');
            }
        }

        function updateStreamingContent(content) {
            const contentDiv = document.getElementById('streaming-content');
            if (contentDiv) {
                contentDiv.textContent = content;
                contentDiv.scrollTop = contentDiv.scrollHeight;
            }
        }

        function showResults(result) {
            currentResult = result;
            completeStep('generate');
            const streamingContainer = document.getElementById('streaming-container');
            if (streamingContainer) {
                streamingContainer.style.display = 'none';
            }
            const resultsContainer = document.getElementById('results-container');
            if (resultsContainer) {
                resultsContainer.classList.remove('hidden');
                resultsContainer.innerHTML = generateResultsHTML(result);
            }
        }

        function showError(error) {
            // Hide streaming UI
            const streamingContainer = document.getElementById('streaming-container');
            if (streamingContainer) {
                streamingContainer.style.display = 'none';
            }
            // Show error card
            const errorContainer = document.getElementById('error-container');
            const errorMessage = document.getElementById('error-message');
            if (errorContainer && errorMessage) {
                let displayMsg = 'Oops! Something went wrong. Please try again shortly.';

                if (typeof error === 'string') {
                    const err = error.toLowerCase();

                    if (err.includes('rate limit')) {
                        displayMsg = 'You‚Äôve hit the request limit. Please wait a moment before trying again.';
                    } else if (err.includes('token')) {
                        displayMsg = 'Authentication failed. Please check your credentials or log in again.';
                    } else if (err.includes('not found')) {
                        displayMsg = 'We couldn‚Äôt find that repository. Please verify the URL or repository name.';
                    } else if (err.includes('access denied') || err.includes('permission')) {
                        displayMsg = 'Access denied. Make sure you have the required permissions for this repository.';
                    } else if (err.includes('timeout')) {
                        displayMsg = 'The request took too long to complete. Please try again in a moment.';
                    } else if (err.includes('connection')) {
                        displayMsg = 'Network error. Please check your internet connection and try again.';
                    } else if (err.includes('large repositories')) {
                        displayMsg = 'This repository is too large to process. Support for large repositories is limited‚Äîplease contact the developer if needed.';
                    }
                }

                errorMessage.textContent = displayMsg;
                errorContainer.style.display = 'block';
            }

        }
        // Make error card reload button always do a GET request to the same path
        document.addEventListener('DOMContentLoaded', function () {
            const errorContainer = document.getElementById('error-container');
            if (errorContainer) {
                const btn = errorContainer.querySelector('button');
                if (btn) {
                    btn.onclick = function (e) {
                        e.preventDefault();
                        window.location.href = window.location.pathname + window.location.search;
                    };
                }
            }
        });

        function generateResultsHTML(result) {
            let html = '<div class="space-y-6">';
            html += '<div class="flex justify-end gap-3 flex-wrap">';
            html += '<div class="relative group">';
            html += '<div class="w-full h-full rounded-md bg-gray-900 translate-y-0.5 translate-x-0.5 absolute inset-0"></div>';
            html += '<button onclick="regenerateResume()" class="px-4 py-1.5 bg-[#059669] border-retro text-gray-900 rounded-md button-hover relative z-10 flex items-center gap-1 text-sm font-semibold">';
            html += '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h5m-5 0a7 7 0 1110 0m-7 7v5h5m-5 0a7 7 0 1110 0"/></svg>';
            html += 'Regenerate';
            html += '</button>';
            html += '</div>';
            html += '<div class="relative group">';
            html += '<div class="w-full h-full rounded-md bg-gray-900 translate-y-0.5 translate-x-0.5 absolute inset-0"></div>';
            html += '<button onclick="copyLatexStream()" class="px-4 py-1.5 bg-[#059669] border-retro text-gray-900 rounded-md button-hover relative z-10 flex items-center gap-1 text-sm font-semibold">';
            html += '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"/></svg>';
            html += 'Copy LaTeX';
            html += '</button>';
            html += '</div>';
            html += '<div class="relative group">';
            html += '<div class="w-full h-full rounded-md bg-gray-900 translate-y-0.5 translate-x-0.5 absolute inset-0"></div>';
            html += '<button onclick="copyTextStream()" class="px-4 py-1.5 bg-[#059669] border-retro text-gray-900 rounded-md button-hover relative z-10 flex items-center gap-1 text-sm font-semibold">';
            html += '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"/></svg>';
            html += 'Copy Text';
            html += '</button>';
            html += '</div>';

            // Interview Questions Button
            if (result.interview_questions && result.interview_questions.length > 0) {
                html += '<div class="relative group">';
                html += '<div class="w-full h-full rounded-md bg-gray-900 translate-y-0.5 translate-x-0.5 absolute inset-0"></div>';
                html += '<button onclick="toggleInterviewQuestionsStream()" id="interview-questions-btn-stream" class="px-4 py-1.5 bg-[#059669] border-retro text-gray-900 rounded-md button-hover relative z-10 flex items-center gap-1 text-sm font-semibold">';
                html += '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">';
                html += '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>';
                html += '</svg>';
                html += 'Interview Questions';
                html += '</button>';
                html += '</div>';
            }

            html += '</div>';
            html += '<div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">';
            html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4">';
            html += '<h3 class="font-bold text-base text-gray-900 mb-1">‚öíÔ∏è Project</h3>';
            html += '<p class="text-sm text-gray-700">' + result.project_title + '</p>';
            html += '</div>';
            html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4">';
            html += '<h3 class="font-bold text-base text-gray-900 mb-1">üßë‚Äçüíª Technology Stack</h3>';
            html += '<p class="text-sm text-gray-700">' + result.tech_stack.join(", ") + '</p>';
            html += '</div>';
            html += '</div>';
            html += '<div>';
            html += '<h3 class="text-xl font-bold text-gray-900 mb-2">üìù Achievements</h3>';
            html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4">';
            html += '<ul class="list-disc list-inside text-sm text-gray-700 space-y-2">';
            for (var i = 0; i < result.bullet_points.length; i++) {
                html += '<li>' + result.bullet_points[i] + '</li>';
            }
            html += '</ul>';
            html += '</div>';
            html += '</div>';            // Hidden Interview Questions Section
            if (result.interview_questions && result.interview_questions.length > 0) {
                html += '<div id="interview-questions-section-stream" class="hidden">';
                html += '<h3 class="text-xl font-bold text-gray-900 mb-2">üí¨ Interview Questions & Answers</h3>';
                html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4 space-y-4">';

                for (var i = 0; i < result.interview_questions.length; i++) {
                    const questionItem = result.interview_questions[i];
                    const questionText = typeof questionItem === 'string' ? questionItem : questionItem.question;
                    const answerText = typeof questionItem === 'object' && questionItem.answer ? questionItem.answer : '';

                    html += '<div class="border-b border-gray-300 pb-4 last:border-b-0 last:pb-0">';

                    if (typeof questionItem === 'object' && questionItem.question) {
                        html += '<div class="mb-2">';
                        html += '<h4 class="text-sm font-semibold text-gray-800 mb-2">Q' + (i + 1) + ': ' + questionText + '</h4>';
                        if (answerText) {
                            html += '<div class="bg-gray-50 border border-gray-200 rounded-md p-3">';
                            html += '<p class="text-xs text-gray-700 whitespace-pre-wrap">' + answerText + '</p>';
                            html += '</div>';
                        }
                        html += '</div>';
                    } else {
                        html += '<div class="mb-2">';
                        html += '<h4 class="text-sm font-semibold text-gray-800">Q' + (i + 1) + ': ' + questionText + '</h4>';
                        html += '</div>';
                    }

                    html += '</div>';
                }

                html += '</div>';
                html += '</div>';
            }

            // Toggle for optional sections
            let hasOptionalSections = result.additional_notes || result.future_plans || result.potential_advancements;
            if (hasOptionalSections) {
                html += '<div class="border-t border-gray-300 pt-4">';
                html += '<div class="flex items-center mb-4">';
                html += '<input type="checkbox" id="show-optional-sections" class="mr-2" onchange="toggleOptionalSections()">';
                html += '<label for="show-optional-sections" class="text-sm font-semibold text-gray-700">Show Additional Information</label>';
                html += '</div>';
                html += '<div id="optional-sections" class="space-y-6" style="display: none;">';
            }

            if (result.additional_notes) {
                html += '<div>';
                html += '<h3 class="text-xl font-bold text-gray-900 mb-2">Additional Notes</h3>';
                html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4">';
                html += '<p class="text-sm text-gray-700 whitespace-pre-wrap">' + result.additional_notes + '</p>';
                html += '</div>';
                html += '</div>';
            }

            if (result.future_plans) {
                html += '<div>';
                html += '<h3 class="text-xl font-bold text-gray-900 mb-2">Future Plans</h3>';
                html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4">';
                html += '<p class="text-sm text-gray-700 whitespace-pre-wrap">' + result.future_plans + '</p>';
                html += '</div>';
                html += '</div>';
            }

            if (result.potential_advancements) {
                html += '<div>';
                html += '<h3 class="text-xl font-bold text-gray-900 mb-2">Potential Advancements</h3>';
                html += '<div class="bg-[#D1FAE5] border-retro rounded-md p-4">';
                html += '<p class="text-sm text-gray-700 whitespace-pre-wrap">' + result.potential_advancements + '</p>';
                html += '</div>';
                html += '</div>';
            }

            if (hasOptionalSections) {
                html += '</div>'; // Close optional-sections div
                html += '</div>'; // Close toggle container
            }

            html += '</div>';
            return html;
        }        function toggleOptionalSections() {
        const checkbox = document.getElementById('show-optional-sections');
        const sections = document.getElementById('optional-sections');
        if (checkbox && sections) {
            sections.style.display = checkbox.checked ? 'block' : 'none';
        }
    }        function toggleAnswer(questionIndex) {
        const answerDiv = document.getElementById('answer-' + questionIndex);
        const toggleBtn = document.getElementById('toggle-btn-' + questionIndex);

        if (answerDiv && toggleBtn) {
            if (answerDiv.style.display === 'none') {
                answerDiv.style.display = 'block';
                toggleBtn.textContent = 'Hide Answer';
                toggleBtn.classList.remove('bg-gray-200', 'hover:bg-gray-300');
                toggleBtn.classList.add('bg-gray-300', 'hover:bg-gray-400');
            } else {
                answerDiv.style.display = 'none';
                toggleBtn.textContent = 'Show Answer';
                toggleBtn.classList.remove('bg-gray-300', 'hover:bg-gray-400');
                toggleBtn.classList.add('bg-gray-200', 'hover:bg-gray-300');
            }
        }
    }

        function toggleInterviewQuestionsStream() {
            const section = document.getElementById('interview-questions-section-stream');
            const button = document.getElementById('interview-questions-btn-stream');

            if (section && button) {
                if (section.classList.contains('hidden')) {
                    section.classList.remove('hidden');
                    button.innerHTML = `
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                        Hide Questions
                    `;
                } else {
                    section.classList.add('hidden');
                    button.innerHTML = `
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        Interview Questions
                    `;
                }
            }
        }

        function copyLatexStream() {
            if (currentResult) {
                const latex = formatLatex(currentResult);
                copyToClipboard(latex, 'LaTeX copied!', event.target.closest('button'));
            }
        }

        function copyTextStream() {
            if (currentResult) {
                const text = formatText(currentResult);
                copyToClipboard(text, 'Text copied!', event.target.closest('button'));
            }
        }

        connectWebSocket();
    {% endif %}
</script>
